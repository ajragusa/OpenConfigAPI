# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Ipv6NeighborState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, origin: str=None, neighbor_state: str=None, is_router: bool=None):  # noqa: E501
        """Ipv6NeighborState - a model defined in Swagger

        :param origin: The origin of this Ipv6NeighborState.  # noqa: E501
        :type origin: str
        :param neighbor_state: The neighbor_state of this Ipv6NeighborState.  # noqa: E501
        :type neighbor_state: str
        :param is_router: The is_router of this Ipv6NeighborState.  # noqa: E501
        :type is_router: bool
        """
        self.swagger_types = {
            'origin': str,
            'neighbor_state': str,
            'is_router': bool
        }

        self.attribute_map = {
            'origin': 'origin',
            'neighbor_state': 'neighborState',
            'is_router': 'isRouter'
        }

        self._origin = origin
        self._neighbor_state = neighbor_state
        self._is_router = is_router

    @classmethod
    def from_dict(cls, dikt) -> 'Ipv6NeighborState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ipv6NeighborState of this Ipv6NeighborState.  # noqa: E501
        :rtype: Ipv6NeighborState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self) -> str:
        """Gets the origin of this Ipv6NeighborState.

        The origin of this neighbor entry.  # noqa: E501

        :return: The origin of this Ipv6NeighborState.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this Ipv6NeighborState.

        The origin of this neighbor entry.  # noqa: E501

        :param origin: The origin of this Ipv6NeighborState.
        :type origin: str
        """
        allowed_values = ["OTHER", "STATIC", "DYNAMIC"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def neighbor_state(self) -> str:
        """Gets the neighbor_state of this Ipv6NeighborState.

        The Neighbor Unreachability Detection state of this entry.  # noqa: E501

        :return: The neighbor_state of this Ipv6NeighborState.
        :rtype: str
        """
        return self._neighbor_state

    @neighbor_state.setter
    def neighbor_state(self, neighbor_state: str):
        """Sets the neighbor_state of this Ipv6NeighborState.

        The Neighbor Unreachability Detection state of this entry.  # noqa: E501

        :param neighbor_state: The neighbor_state of this Ipv6NeighborState.
        :type neighbor_state: str
        """
        allowed_values = ["INCOMPLETE", "REACHABLE", "STALE", "DELAY", "PROBE"]  # noqa: E501
        if neighbor_state not in allowed_values:
            raise ValueError(
                "Invalid value for `neighbor_state` ({0}), must be one of {1}"
                .format(neighbor_state, allowed_values)
            )

        self._neighbor_state = neighbor_state

    @property
    def is_router(self) -> bool:
        """Gets the is_router of this Ipv6NeighborState.

        Indicates that the neighbor node acts as a router.  # noqa: E501

        :return: The is_router of this Ipv6NeighborState.
        :rtype: bool
        """
        return self._is_router

    @is_router.setter
    def is_router(self, is_router: bool):
        """Sets the is_router of this Ipv6NeighborState.

        Indicates that the neighbor node acts as a router.  # noqa: E501

        :param is_router: The is_router of this Ipv6NeighborState.
        :type is_router: bool
        """

        self._is_router = is_router
