# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.addresses_schema_vrrp import AddressesSchemaVrrp  # noqa: F401,E501
from swagger_server.models.ipv6_address_config import Ipv6AddressConfig  # noqa: F401,E501
from swagger_server.models.ipv6_address_state import Ipv6AddressState  # noqa: F401,E501
from swagger_server import util


class AddressSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, state: Ipv6AddressState=None, config: Ipv6AddressConfig=None, vrrp: AddressesSchemaVrrp=None):  # noqa: E501
        """AddressSchema - a model defined in Swagger

        :param ip: The ip of this AddressSchema.  # noqa: E501
        :type ip: str
        :param state: The state of this AddressSchema.  # noqa: E501
        :type state: Ipv6AddressState
        :param config: The config of this AddressSchema.  # noqa: E501
        :type config: Ipv6AddressConfig
        :param vrrp: The vrrp of this AddressSchema.  # noqa: E501
        :type vrrp: AddressesSchemaVrrp
        """
        self.swagger_types = {
            'ip': str,
            'state': Ipv6AddressState,
            'config': Ipv6AddressConfig,
            'vrrp': AddressesSchemaVrrp
        }

        self.attribute_map = {
            'ip': 'ip',
            'state': 'state',
            'config': 'config',
            'vrrp': 'vrrp'
        }

        self._ip = ip
        self._state = state
        self._config = config
        self._vrrp = vrrp

    @classmethod
    def from_dict(cls, dikt) -> 'AddressSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddressSchema of this AddressSchema.  # noqa: E501
        :rtype: AddressSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this AddressSchema.

        References the configured IP address  # noqa: E501

        :return: The ip of this AddressSchema.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this AddressSchema.

        References the configured IP address  # noqa: E501

        :param ip: The ip of this AddressSchema.
        :type ip: str
        """

        self._ip = ip

    @property
    def state(self) -> Ipv6AddressState:
        """Gets the state of this AddressSchema.

        State data for each IPv6 address on the interface  # noqa: E501

        :return: The state of this AddressSchema.
        :rtype: Ipv6AddressState
        """
        return self._state

    @state.setter
    def state(self, state: Ipv6AddressState):
        """Sets the state of this AddressSchema.

        State data for each IPv6 address on the interface  # noqa: E501

        :param state: The state of this AddressSchema.
        :type state: Ipv6AddressState
        """

        self._state = state

    @property
    def config(self) -> Ipv6AddressConfig:
        """Gets the config of this AddressSchema.

        Configuration data for each IPv6 address on the interface  # noqa: E501

        :return: The config of this AddressSchema.
        :rtype: Ipv6AddressConfig
        """
        return self._config

    @config.setter
    def config(self, config: Ipv6AddressConfig):
        """Sets the config of this AddressSchema.

        Configuration data for each IPv6 address on the interface  # noqa: E501

        :param config: The config of this AddressSchema.
        :type config: Ipv6AddressConfig
        """

        self._config = config

    @property
    def vrrp(self) -> AddressesSchemaVrrp:
        """Gets the vrrp of this AddressSchema.


        :return: The vrrp of this AddressSchema.
        :rtype: AddressesSchemaVrrp
        """
        return self._vrrp

    @vrrp.setter
    def vrrp(self, vrrp: AddressesSchemaVrrp):
        """Sets the vrrp of this AddressSchema.


        :param vrrp: The vrrp of this AddressSchema.
        :type vrrp: AddressesSchemaVrrp
        """

        self._vrrp = vrrp
