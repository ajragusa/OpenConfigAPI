# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EthernetIfAggregationConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, aggregate_id: str=None):  # noqa: E501
        """EthernetIfAggregationConfig - a model defined in Swagger

        :param aggregate_id: The aggregate_id of this EthernetIfAggregationConfig.  # noqa: E501
        :type aggregate_id: str
        """
        self.swagger_types = {
            'aggregate_id': str
        }

        self.attribute_map = {
            'aggregate_id': 'aggregateId'
        }

        self._aggregate_id = aggregate_id

    @classmethod
    def from_dict(cls, dikt) -> 'EthernetIfAggregationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EthernetIfAggregationConfig of this EthernetIfAggregationConfig.  # noqa: E501
        :rtype: EthernetIfAggregationConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_id(self) -> str:
        """Gets the aggregate_id of this EthernetIfAggregationConfig.

        Specify the logical aggregate interface to which this interface belongs  # noqa: E501

        :return: The aggregate_id of this EthernetIfAggregationConfig.
        :rtype: str
        """
        return self._aggregate_id

    @aggregate_id.setter
    def aggregate_id(self, aggregate_id: str):
        """Sets the aggregate_id of this EthernetIfAggregationConfig.

        Specify the logical aggregate interface to which this interface belongs  # noqa: E501

        :param aggregate_id: The aggregate_id of this EthernetIfAggregationConfig.
        :type aggregate_id: str
        """

        self._aggregate_id = aggregate_id
