# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ip_common_global_config import IpCommonGlobalConfig  # noqa: F401,E501
from swagger_server import util


class Ipv6GlobalConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, dhcp_client: bool=None, dup_addr_detect_transmits: str=None, enabled: bool=None, mtu: str=None):  # noqa: E501
        """Ipv6GlobalConfig - a model defined in Swagger

        :param dhcp_client: The dhcp_client of this Ipv6GlobalConfig.  # noqa: E501
        :type dhcp_client: bool
        :param dup_addr_detect_transmits: The dup_addr_detect_transmits of this Ipv6GlobalConfig.  # noqa: E501
        :type dup_addr_detect_transmits: str
        :param enabled: The enabled of this Ipv6GlobalConfig.  # noqa: E501
        :type enabled: bool
        :param mtu: The mtu of this Ipv6GlobalConfig.  # noqa: E501
        :type mtu: str
        """
        self.swagger_types = {
            'dhcp_client': bool,
            'dup_addr_detect_transmits': str,
            'enabled': bool,
            'mtu': str
        }

        self.attribute_map = {
            'dhcp_client': 'dhcpClient',
            'dup_addr_detect_transmits': 'dupAddrDetectTransmits',
            'enabled': 'enabled',
            'mtu': 'mtu'
        }

        self._dhcp_client = dhcp_client
        self._dup_addr_detect_transmits = dup_addr_detect_transmits
        self._enabled = enabled
        self._mtu = mtu

    @classmethod
    def from_dict(cls, dikt) -> 'Ipv6GlobalConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ipv6GlobalConfig of this Ipv6GlobalConfig.  # noqa: E501
        :rtype: Ipv6GlobalConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dhcp_client(self) -> bool:
        """Gets the dhcp_client of this Ipv6GlobalConfig.

        Enables a DHCP client on the interface in order to request an address  # noqa: E501

        :return: The dhcp_client of this Ipv6GlobalConfig.
        :rtype: bool
        """
        return self._dhcp_client

    @dhcp_client.setter
    def dhcp_client(self, dhcp_client: bool):
        """Sets the dhcp_client of this Ipv6GlobalConfig.

        Enables a DHCP client on the interface in order to request an address  # noqa: E501

        :param dhcp_client: The dhcp_client of this Ipv6GlobalConfig.
        :type dhcp_client: bool
        """

        self._dhcp_client = dhcp_client

    @property
    def dup_addr_detect_transmits(self) -> str:
        """Gets the dup_addr_detect_transmits of this Ipv6GlobalConfig.

        The number of consecutive Neighbor Solicitation messages sent while performing Duplicate Address Detection on a tentative address.  A value of zero indicates that Duplicate Address Detection is not performed on tentative addresses.  A value of one indicates a single transmission with no follow-up retransmissions.  # noqa: E501

        :return: The dup_addr_detect_transmits of this Ipv6GlobalConfig.
        :rtype: str
        """
        return self._dup_addr_detect_transmits

    @dup_addr_detect_transmits.setter
    def dup_addr_detect_transmits(self, dup_addr_detect_transmits: str):
        """Sets the dup_addr_detect_transmits of this Ipv6GlobalConfig.

        The number of consecutive Neighbor Solicitation messages sent while performing Duplicate Address Detection on a tentative address.  A value of zero indicates that Duplicate Address Detection is not performed on tentative addresses.  A value of one indicates a single transmission with no follow-up retransmissions.  # noqa: E501

        :param dup_addr_detect_transmits: The dup_addr_detect_transmits of this Ipv6GlobalConfig.
        :type dup_addr_detect_transmits: str
        """

        self._dup_addr_detect_transmits = dup_addr_detect_transmits

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this Ipv6GlobalConfig.

        Controls whether IPv6 is enabled or disabled on this interface.  When IPv6 is enabled, this interface is connected to an IPv6 stack, and the interface can send and receive IPv6 packets.  # noqa: E501

        :return: The enabled of this Ipv6GlobalConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this Ipv6GlobalConfig.

        Controls whether IPv6 is enabled or disabled on this interface.  When IPv6 is enabled, this interface is connected to an IPv6 stack, and the interface can send and receive IPv6 packets.  # noqa: E501

        :param enabled: The enabled of this Ipv6GlobalConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def mtu(self) -> str:
        """Gets the mtu of this Ipv6GlobalConfig.

        The size, in octets, of the largest IPv6 packet that the interface will send and receive.  The server may restrict the allowed values for this leaf, depending on the interface's type.  If this leaf is not configured, the operationally used MTU depends on the interface's type.  # noqa: E501

        :return: The mtu of this Ipv6GlobalConfig.
        :rtype: str
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu: str):
        """Sets the mtu of this Ipv6GlobalConfig.

        The size, in octets, of the largest IPv6 packet that the interface will send and receive.  The server may restrict the allowed values for this leaf, depending on the interface's type.  If this leaf is not configured, the operationally used MTU depends on the interface's type.  # noqa: E501

        :param mtu: The mtu of this Ipv6GlobalConfig.
        :type mtu: str
        """

        self._mtu = mtu
