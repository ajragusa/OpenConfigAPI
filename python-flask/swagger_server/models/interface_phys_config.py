# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.interface_common_config import InterfaceCommonConfig  # noqa: F401,E501
from swagger_server import util


class InterfacePhysConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, description: str=None, loopback_mode: bool=None, type: str=None, name: str=None, mtu: str=None):  # noqa: E501
        """InterfacePhysConfig - a model defined in Swagger

        :param enabled: The enabled of this InterfacePhysConfig.  # noqa: E501
        :type enabled: bool
        :param description: The description of this InterfacePhysConfig.  # noqa: E501
        :type description: str
        :param loopback_mode: The loopback_mode of this InterfacePhysConfig.  # noqa: E501
        :type loopback_mode: bool
        :param type: The type of this InterfacePhysConfig.  # noqa: E501
        :type type: str
        :param name: The name of this InterfacePhysConfig.  # noqa: E501
        :type name: str
        :param mtu: The mtu of this InterfacePhysConfig.  # noqa: E501
        :type mtu: str
        """
        self.swagger_types = {
            'enabled': bool,
            'description': str,
            'loopback_mode': bool,
            'type': str,
            'name': str,
            'mtu': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'description': 'description',
            'loopback_mode': 'loopbackMode',
            'type': 'type',
            'name': 'name',
            'mtu': 'mtu'
        }

        self._enabled = enabled
        self._description = description
        self._loopback_mode = loopback_mode
        self._type = type
        self._name = name
        self._mtu = mtu

    @classmethod
    def from_dict(cls, dikt) -> 'InterfacePhysConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InterfacePhysConfig of this InterfacePhysConfig.  # noqa: E501
        :rtype: InterfacePhysConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this InterfacePhysConfig.

        This leaf contains the configured, desired state of the interface.  Systems that implement the IF-MIB use the value of this leaf in the 'running' datastore to set IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry has been initialized, as described in RFC 2863.  Changes in this leaf in the 'running' datastore are reflected in ifAdminStatus, but if ifAdminStatus is changed over SNMP, this leaf is not affected.  # noqa: E501

        :return: The enabled of this InterfacePhysConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this InterfacePhysConfig.

        This leaf contains the configured, desired state of the interface.  Systems that implement the IF-MIB use the value of this leaf in the 'running' datastore to set IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry has been initialized, as described in RFC 2863.  Changes in this leaf in the 'running' datastore are reflected in ifAdminStatus, but if ifAdminStatus is changed over SNMP, this leaf is not affected.  # noqa: E501

        :param enabled: The enabled of this InterfacePhysConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def description(self) -> str:
        """Gets the description of this InterfacePhysConfig.

        A textual description of the interface.  A server implementation MAY map this leaf to the ifAlias MIB object.  Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifAlias.  The definition of such a mechanism is outside the scope of this document.  Since ifAlias is defined to be stored in non-volatile storage, the MIB implementation MUST map ifAlias to the value of 'description' in the persistently stored datastore.  Specifically, if the device supports ':startup', when ifAlias is read the device MUST return the value of 'description' in the 'startup' datastore, and when it is written, it MUST be written to the 'running' and 'startup' datastores.  Note that it is up to the implementation to  decide whether to modify this single leaf in 'startup' or perform an implicit copy-config from 'running' to 'startup'.  If the device does not support ':startup', ifAlias MUST be mapped to the 'description' leaf in the 'running' datastore.  # noqa: E501

        :return: The description of this InterfacePhysConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this InterfacePhysConfig.

        A textual description of the interface.  A server implementation MAY map this leaf to the ifAlias MIB object.  Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifAlias.  The definition of such a mechanism is outside the scope of this document.  Since ifAlias is defined to be stored in non-volatile storage, the MIB implementation MUST map ifAlias to the value of 'description' in the persistently stored datastore.  Specifically, if the device supports ':startup', when ifAlias is read the device MUST return the value of 'description' in the 'startup' datastore, and when it is written, it MUST be written to the 'running' and 'startup' datastores.  Note that it is up to the implementation to  decide whether to modify this single leaf in 'startup' or perform an implicit copy-config from 'running' to 'startup'.  If the device does not support ':startup', ifAlias MUST be mapped to the 'description' leaf in the 'running' datastore.  # noqa: E501

        :param description: The description of this InterfacePhysConfig.
        :type description: str
        """

        self._description = description

    @property
    def loopback_mode(self) -> bool:
        """Gets the loopback_mode of this InterfacePhysConfig.

        When set to true, the interface is logically looped back, such that packets that are forwarded via the interface are received on the same interface.  # noqa: E501

        :return: The loopback_mode of this InterfacePhysConfig.
        :rtype: bool
        """
        return self._loopback_mode

    @loopback_mode.setter
    def loopback_mode(self, loopback_mode: bool):
        """Sets the loopback_mode of this InterfacePhysConfig.

        When set to true, the interface is logically looped back, such that packets that are forwarded via the interface are received on the same interface.  # noqa: E501

        :param loopback_mode: The loopback_mode of this InterfacePhysConfig.
        :type loopback_mode: bool
        """

        self._loopback_mode = loopback_mode

    @property
    def type(self) -> str:
        """Gets the type of this InterfacePhysConfig.

        The type of the interface.  When an interface entry is created, a server MAY initialize the type leaf with a valid value, e.g., if it is possible to derive the type from the name of the interface.  If a client tries to set the type of an interface to a value that can never be used by the system, e.g., if the type is not supported or if the type does not match the name of the interface, the server MUST reject the request. A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  # noqa: E501

        :return: The type of this InterfacePhysConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this InterfacePhysConfig.

        The type of the interface.  When an interface entry is created, a server MAY initialize the type leaf with a valid value, e.g., if it is possible to derive the type from the name of the interface.  If a client tries to set the type of an interface to a value that can never be used by the system, e.g., if the type is not supported or if the type does not match the name of the interface, the server MUST reject the request. A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  # noqa: E501

        :param type: The type of this InterfacePhysConfig.
        :type type: str
        """

        self._type = type

    @property
    def name(self) -> str:
        """Gets the name of this InterfacePhysConfig.

        The name of the interface.  A device MAY restrict the allowed values for this leaf, possibly depending on the type of the interface. For system-controlled interfaces, this leaf is the device-specific name of the interface.  The 'config false' list interfaces/interface[name]/state contains the currently existing interfaces on the device.  If a client tries to create configuration for a system-controlled interface that is not present in the corresponding state list, the server MAY reject the request if the implementation does not support pre-provisioning of interfaces or if the name refers to an interface that can never exist in the system.  A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  The IETF model in RFC 7223 provides YANG features for the following (i.e., pre-provisioning and arbitrary-names), however they are omitted here:   If the device supports pre-provisioning of interface  configuration, the 'pre-provisioning' feature is  advertised.   If the device allows arbitrarily named user-controlled  interfaces, the 'arbitrary-names' feature is advertised.  When a configured user-controlled interface is created by the system, it is instantiated with the same name in the /interfaces/interface[name]/state list.  # noqa: E501

        :return: The name of this InterfacePhysConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this InterfacePhysConfig.

        The name of the interface.  A device MAY restrict the allowed values for this leaf, possibly depending on the type of the interface. For system-controlled interfaces, this leaf is the device-specific name of the interface.  The 'config false' list interfaces/interface[name]/state contains the currently existing interfaces on the device.  If a client tries to create configuration for a system-controlled interface that is not present in the corresponding state list, the server MAY reject the request if the implementation does not support pre-provisioning of interfaces or if the name refers to an interface that can never exist in the system.  A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  The IETF model in RFC 7223 provides YANG features for the following (i.e., pre-provisioning and arbitrary-names), however they are omitted here:   If the device supports pre-provisioning of interface  configuration, the 'pre-provisioning' feature is  advertised.   If the device allows arbitrarily named user-controlled  interfaces, the 'arbitrary-names' feature is advertised.  When a configured user-controlled interface is created by the system, it is instantiated with the same name in the /interfaces/interface[name]/state list.  # noqa: E501

        :param name: The name of this InterfacePhysConfig.
        :type name: str
        """

        self._name = name

    @property
    def mtu(self) -> str:
        """Gets the mtu of this InterfacePhysConfig.

        Set the max transmission unit size in octets for the physical interface.  If this is not set, the mtu is set to the operational default -- e.g., 1514 bytes on an Ethernet interface.  # noqa: E501

        :return: The mtu of this InterfacePhysConfig.
        :rtype: str
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu: str):
        """Sets the mtu of this InterfacePhysConfig.

        Set the max transmission unit size in octets for the physical interface.  If this is not set, the mtu is set to the operational default -- e.g., 1514 bytes on an Ethernet interface.  # noqa: E501

        :param mtu: The mtu of this InterfacePhysConfig.
        :type mtu: str
        """

        self._mtu = mtu
