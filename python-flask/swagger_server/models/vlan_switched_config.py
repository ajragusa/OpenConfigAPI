# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VlanSwitchedConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, interface_mode: str=None, trunk_vlans: List[str]=None, native_vlan: str=None, access_vlan: str=None):  # noqa: E501
        """VlanSwitchedConfig - a model defined in Swagger

        :param interface_mode: The interface_mode of this VlanSwitchedConfig.  # noqa: E501
        :type interface_mode: str
        :param trunk_vlans: The trunk_vlans of this VlanSwitchedConfig.  # noqa: E501
        :type trunk_vlans: List[str]
        :param native_vlan: The native_vlan of this VlanSwitchedConfig.  # noqa: E501
        :type native_vlan: str
        :param access_vlan: The access_vlan of this VlanSwitchedConfig.  # noqa: E501
        :type access_vlan: str
        """
        self.swagger_types = {
            'interface_mode': str,
            'trunk_vlans': List[str],
            'native_vlan': str,
            'access_vlan': str
        }

        self.attribute_map = {
            'interface_mode': 'interfaceMode',
            'trunk_vlans': 'trunkVlans',
            'native_vlan': 'nativeVlan',
            'access_vlan': 'accessVlan'
        }

        self._interface_mode = interface_mode
        self._trunk_vlans = trunk_vlans
        self._native_vlan = native_vlan
        self._access_vlan = access_vlan

    @classmethod
    def from_dict(cls, dikt) -> 'VlanSwitchedConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VlanSwitchedConfig of this VlanSwitchedConfig.  # noqa: E501
        :rtype: VlanSwitchedConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface_mode(self) -> str:
        """Gets the interface_mode of this VlanSwitchedConfig.

        Set the interface to access or trunk mode for VLANs  # noqa: E501

        :return: The interface_mode of this VlanSwitchedConfig.
        :rtype: str
        """
        return self._interface_mode

    @interface_mode.setter
    def interface_mode(self, interface_mode: str):
        """Sets the interface_mode of this VlanSwitchedConfig.

        Set the interface to access or trunk mode for VLANs  # noqa: E501

        :param interface_mode: The interface_mode of this VlanSwitchedConfig.
        :type interface_mode: str
        """

        self._interface_mode = interface_mode

    @property
    def trunk_vlans(self) -> List[str]:
        """Gets the trunk_vlans of this VlanSwitchedConfig.


        :return: The trunk_vlans of this VlanSwitchedConfig.
        :rtype: List[str]
        """
        return self._trunk_vlans

    @trunk_vlans.setter
    def trunk_vlans(self, trunk_vlans: List[str]):
        """Sets the trunk_vlans of this VlanSwitchedConfig.


        :param trunk_vlans: The trunk_vlans of this VlanSwitchedConfig.
        :type trunk_vlans: List[str]
        """

        self._trunk_vlans = trunk_vlans

    @property
    def native_vlan(self) -> str:
        """Gets the native_vlan of this VlanSwitchedConfig.

        Set the native VLAN id for untagged frames arriving on a trunk interface.  Tagged frames sent on an interface configured with a native VLAN should have their tags stripped prior to transmission. This configuration is only valid on a trunk interface.  # noqa: E501

        :return: The native_vlan of this VlanSwitchedConfig.
        :rtype: str
        """
        return self._native_vlan

    @native_vlan.setter
    def native_vlan(self, native_vlan: str):
        """Sets the native_vlan of this VlanSwitchedConfig.

        Set the native VLAN id for untagged frames arriving on a trunk interface.  Tagged frames sent on an interface configured with a native VLAN should have their tags stripped prior to transmission. This configuration is only valid on a trunk interface.  # noqa: E501

        :param native_vlan: The native_vlan of this VlanSwitchedConfig.
        :type native_vlan: str
        """

        self._native_vlan = native_vlan

    @property
    def access_vlan(self) -> str:
        """Gets the access_vlan of this VlanSwitchedConfig.

        Assign the access vlan to the access port.  # noqa: E501

        :return: The access_vlan of this VlanSwitchedConfig.
        :rtype: str
        """
        return self._access_vlan

    @access_vlan.setter
    def access_vlan(self, access_vlan: str):
        """Sets the access_vlan of this VlanSwitchedConfig.

        Assign the access vlan to the access port.  # noqa: E501

        :param access_vlan: The access_vlan of this VlanSwitchedConfig.
        :type access_vlan: str
        """

        self._access_vlan = access_vlan
