# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InterfaceCommonState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ifindex: str=None, admin_status: str=None, last_change: str=None, oper_status: str=None, logical: bool=None):  # noqa: E501
        """InterfaceCommonState - a model defined in Swagger

        :param ifindex: The ifindex of this InterfaceCommonState.  # noqa: E501
        :type ifindex: str
        :param admin_status: The admin_status of this InterfaceCommonState.  # noqa: E501
        :type admin_status: str
        :param last_change: The last_change of this InterfaceCommonState.  # noqa: E501
        :type last_change: str
        :param oper_status: The oper_status of this InterfaceCommonState.  # noqa: E501
        :type oper_status: str
        :param logical: The logical of this InterfaceCommonState.  # noqa: E501
        :type logical: bool
        """
        self.swagger_types = {
            'ifindex': str,
            'admin_status': str,
            'last_change': str,
            'oper_status': str,
            'logical': bool
        }

        self.attribute_map = {
            'ifindex': 'ifindex',
            'admin_status': 'adminStatus',
            'last_change': 'lastChange',
            'oper_status': 'operStatus',
            'logical': 'logical'
        }

        self._ifindex = ifindex
        self._admin_status = admin_status
        self._last_change = last_change
        self._oper_status = oper_status
        self._logical = logical

    @classmethod
    def from_dict(cls, dikt) -> 'InterfaceCommonState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InterfaceCommonState of this InterfaceCommonState.  # noqa: E501
        :rtype: InterfaceCommonState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ifindex(self) -> str:
        """Gets the ifindex of this InterfaceCommonState.

        System assigned number for each interface.  Corresponds to ifIndex object in SNMP Interface MIB  # noqa: E501

        :return: The ifindex of this InterfaceCommonState.
        :rtype: str
        """
        return self._ifindex

    @ifindex.setter
    def ifindex(self, ifindex: str):
        """Sets the ifindex of this InterfaceCommonState.

        System assigned number for each interface.  Corresponds to ifIndex object in SNMP Interface MIB  # noqa: E501

        :param ifindex: The ifindex of this InterfaceCommonState.
        :type ifindex: str
        """

        self._ifindex = ifindex

    @property
    def admin_status(self) -> str:
        """Gets the admin_status of this InterfaceCommonState.

        The desired state of the interface.  In RFC 7223 this leaf has the same read semantics as ifAdminStatus.  Here, it reflects the administrative state as set by enabling or disabling the interface.  # noqa: E501

        :return: The admin_status of this InterfaceCommonState.
        :rtype: str
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status: str):
        """Sets the admin_status of this InterfaceCommonState.

        The desired state of the interface.  In RFC 7223 this leaf has the same read semantics as ifAdminStatus.  Here, it reflects the administrative state as set by enabling or disabling the interface.  # noqa: E501

        :param admin_status: The admin_status of this InterfaceCommonState.
        :type admin_status: str
        """
        allowed_values = ["UP", "DOWN", "TESTING"]  # noqa: E501
        if admin_status not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_status` ({0}), must be one of {1}"
                .format(admin_status, allowed_values)
            )

        self._admin_status = admin_status

    @property
    def last_change(self) -> str:
        """Gets the last_change of this InterfaceCommonState.

        This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition). This is different than the SNMP ifLastChange object in the standard interface MIB in that it is not relative to the system boot time (i.e,. sysUpTime).  The value is the timestamp in nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :return: The last_change of this InterfaceCommonState.
        :rtype: str
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change: str):
        """Sets the last_change of this InterfaceCommonState.

        This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition). This is different than the SNMP ifLastChange object in the standard interface MIB in that it is not relative to the system boot time (i.e,. sysUpTime).  The value is the timestamp in nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :param last_change: The last_change of this InterfaceCommonState.
        :type last_change: str
        """

        self._last_change = last_change

    @property
    def oper_status(self) -> str:
        """Gets the oper_status of this InterfaceCommonState.

        The current operational state of the interface.  This leaf has the same semantics as ifOperStatus.  # noqa: E501

        :return: The oper_status of this InterfaceCommonState.
        :rtype: str
        """
        return self._oper_status

    @oper_status.setter
    def oper_status(self, oper_status: str):
        """Sets the oper_status of this InterfaceCommonState.

        The current operational state of the interface.  This leaf has the same semantics as ifOperStatus.  # noqa: E501

        :param oper_status: The oper_status of this InterfaceCommonState.
        :type oper_status: str
        """
        allowed_values = ["UP", "DOWN", "TESTING", "UNKNOWN", "DORMANT", "NOT_PRESENT", "LOWER_LAYER_DOWN"]  # noqa: E501
        if oper_status not in allowed_values:
            raise ValueError(
                "Invalid value for `oper_status` ({0}), must be one of {1}"
                .format(oper_status, allowed_values)
            )

        self._oper_status = oper_status

    @property
    def logical(self) -> bool:
        """Gets the logical of this InterfaceCommonState.

        When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system.  # noqa: E501

        :return: The logical of this InterfaceCommonState.
        :rtype: bool
        """
        return self._logical

    @logical.setter
    def logical(self, logical: bool):
        """Sets the logical of this InterfaceCommonState.

        When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system.  # noqa: E501

        :param logical: The logical of this InterfaceCommonState.
        :type logical: bool
        """

        self._logical = logical
