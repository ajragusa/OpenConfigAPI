# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.min_max_time import MinMaxTime  # noqa: F401,E501
from swagger_server import util


class AvgMinMaxInstantStatsPct(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, min_time: str=None, max_time: str=None, max: str=None, avg: str=None, instant: str=None, min: str=None):  # noqa: E501
        """AvgMinMaxInstantStatsPct - a model defined in Swagger

        :param min_time: The min_time of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type min_time: str
        :param max_time: The max_time of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type max_time: str
        :param max: The max of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type max: str
        :param avg: The avg of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type avg: str
        :param instant: The instant of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type instant: str
        :param min: The min of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :type min: str
        """
        self.swagger_types = {
            'min_time': str,
            'max_time': str,
            'max': str,
            'avg': str,
            'instant': str,
            'min': str
        }

        self.attribute_map = {
            'min_time': 'minTime',
            'max_time': 'maxTime',
            'max': 'max',
            'avg': 'avg',
            'instant': 'instant',
            'min': 'min'
        }

        self._min_time = min_time
        self._max_time = max_time
        self._max = max
        self._avg = avg
        self._instant = instant
        self._min = min

    @classmethod
    def from_dict(cls, dikt) -> 'AvgMinMaxInstantStatsPct':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AvgMinMaxInstantStatsPct of this AvgMinMaxInstantStatsPct.  # noqa: E501
        :rtype: AvgMinMaxInstantStatsPct
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_time(self) -> str:
        """Gets the min_time of this AvgMinMaxInstantStatsPct.

        The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :return: The min_time of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._min_time

    @min_time.setter
    def min_time(self, min_time: str):
        """Sets the min_time of this AvgMinMaxInstantStatsPct.

        The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :param min_time: The min_time of this AvgMinMaxInstantStatsPct.
        :type min_time: str
        """

        self._min_time = min_time

    @property
    def max_time(self) -> str:
        """Gets the max_time of this AvgMinMaxInstantStatsPct.

        The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :return: The max_time of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: str):
        """Sets the max_time of this AvgMinMaxInstantStatsPct.

        The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501

        :param max_time: The max_time of this AvgMinMaxInstantStatsPct.
        :type max_time: str
        """

        self._max_time = max_time

    @property
    def max(self) -> str:
        """Gets the max of this AvgMinMaxInstantStatsPct.

        The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :return: The max of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max: str):
        """Sets the max of this AvgMinMaxInstantStatsPct.

        The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :param max: The max of this AvgMinMaxInstantStatsPct.
        :type max: str
        """

        self._max = max

    @property
    def avg(self) -> str:
        """Gets the avg of this AvgMinMaxInstantStatsPct.

        The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :return: The avg of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._avg

    @avg.setter
    def avg(self, avg: str):
        """Sets the avg of this AvgMinMaxInstantStatsPct.

        The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :param avg: The avg of this AvgMinMaxInstantStatsPct.
        :type avg: str
        """

        self._avg = avg

    @property
    def instant(self) -> str:
        """Gets the instant of this AvgMinMaxInstantStatsPct.

        The instantaneous percentage value.  # noqa: E501

        :return: The instant of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._instant

    @instant.setter
    def instant(self, instant: str):
        """Sets the instant of this AvgMinMaxInstantStatsPct.

        The instantaneous percentage value.  # noqa: E501

        :param instant: The instant of this AvgMinMaxInstantStatsPct.
        :type instant: str
        """

        self._instant = instant

    @property
    def min(self) -> str:
        """Gets the min of this AvgMinMaxInstantStatsPct.

        The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :return: The min of this AvgMinMaxInstantStatsPct.
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min: str):
        """Sets the min of this AvgMinMaxInstantStatsPct.

        The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501

        :param min: The min of this AvgMinMaxInstantStatsPct.
        :type min: str
        """

        self._min = min
