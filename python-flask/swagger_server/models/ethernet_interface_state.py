# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ethernet_interface_state_counters import EthernetInterfaceStateCounters  # noqa: F401,E501
from swagger_server import util


class EthernetInterfaceState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, negotiated_port_speed: str=None, counters: EthernetInterfaceStateCounters=None, hw_mac_address: str=None, negotiated_duplex_mode: str=None):  # noqa: E501
        """EthernetInterfaceState - a model defined in Swagger

        :param negotiated_port_speed: The negotiated_port_speed of this EthernetInterfaceState.  # noqa: E501
        :type negotiated_port_speed: str
        :param counters: The counters of this EthernetInterfaceState.  # noqa: E501
        :type counters: EthernetInterfaceStateCounters
        :param hw_mac_address: The hw_mac_address of this EthernetInterfaceState.  # noqa: E501
        :type hw_mac_address: str
        :param negotiated_duplex_mode: The negotiated_duplex_mode of this EthernetInterfaceState.  # noqa: E501
        :type negotiated_duplex_mode: str
        """
        self.swagger_types = {
            'negotiated_port_speed': str,
            'counters': EthernetInterfaceStateCounters,
            'hw_mac_address': str,
            'negotiated_duplex_mode': str
        }

        self.attribute_map = {
            'negotiated_port_speed': 'negotiatedPortSpeed',
            'counters': 'counters',
            'hw_mac_address': 'hwMacAddress',
            'negotiated_duplex_mode': 'negotiatedDuplexMode'
        }

        self._negotiated_port_speed = negotiated_port_speed
        self._counters = counters
        self._hw_mac_address = hw_mac_address
        self._negotiated_duplex_mode = negotiated_duplex_mode

    @classmethod
    def from_dict(cls, dikt) -> 'EthernetInterfaceState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EthernetInterfaceState of this EthernetInterfaceState.  # noqa: E501
        :rtype: EthernetInterfaceState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negotiated_port_speed(self) -> str:
        """Gets the negotiated_port_speed of this EthernetInterfaceState.

        When auto-negotiate is set to TRUE, and the interface has completed auto-negotiation with the remote peer, this value shows the interface speed that has been negotiated.  # noqa: E501

        :return: The negotiated_port_speed of this EthernetInterfaceState.
        :rtype: str
        """
        return self._negotiated_port_speed

    @negotiated_port_speed.setter
    def negotiated_port_speed(self, negotiated_port_speed: str):
        """Sets the negotiated_port_speed of this EthernetInterfaceState.

        When auto-negotiate is set to TRUE, and the interface has completed auto-negotiation with the remote peer, this value shows the interface speed that has been negotiated.  # noqa: E501

        :param negotiated_port_speed: The negotiated_port_speed of this EthernetInterfaceState.
        :type negotiated_port_speed: str
        """

        self._negotiated_port_speed = negotiated_port_speed

    @property
    def counters(self) -> EthernetInterfaceStateCounters:
        """Gets the counters of this EthernetInterfaceState.

        Ethernet interface counters  # noqa: E501

        :return: The counters of this EthernetInterfaceState.
        :rtype: EthernetInterfaceStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters: EthernetInterfaceStateCounters):
        """Sets the counters of this EthernetInterfaceState.

        Ethernet interface counters  # noqa: E501

        :param counters: The counters of this EthernetInterfaceState.
        :type counters: EthernetInterfaceStateCounters
        """

        self._counters = counters

    @property
    def hw_mac_address(self) -> str:
        """Gets the hw_mac_address of this EthernetInterfaceState.

        Represenets the 'burned-in',  or system-assigned, MAC address for the Ethernet interface.  # noqa: E501

        :return: The hw_mac_address of this EthernetInterfaceState.
        :rtype: str
        """
        return self._hw_mac_address

    @hw_mac_address.setter
    def hw_mac_address(self, hw_mac_address: str):
        """Sets the hw_mac_address of this EthernetInterfaceState.

        Represenets the 'burned-in',  or system-assigned, MAC address for the Ethernet interface.  # noqa: E501

        :param hw_mac_address: The hw_mac_address of this EthernetInterfaceState.
        :type hw_mac_address: str
        """

        self._hw_mac_address = hw_mac_address

    @property
    def negotiated_duplex_mode(self) -> str:
        """Gets the negotiated_duplex_mode of this EthernetInterfaceState.

        When auto-negotiate is set to TRUE, and the interface has completed auto-negotiation with the remote peer, this value shows the duplex mode that has been negotiated.  # noqa: E501

        :return: The negotiated_duplex_mode of this EthernetInterfaceState.
        :rtype: str
        """
        return self._negotiated_duplex_mode

    @negotiated_duplex_mode.setter
    def negotiated_duplex_mode(self, negotiated_duplex_mode: str):
        """Sets the negotiated_duplex_mode of this EthernetInterfaceState.

        When auto-negotiate is set to TRUE, and the interface has completed auto-negotiation with the remote peer, this value shows the duplex mode that has been negotiated.  # noqa: E501

        :param negotiated_duplex_mode: The negotiated_duplex_mode of this EthernetInterfaceState.
        :type negotiated_duplex_mode: str
        """
        allowed_values = ["FULL", "HALF"]  # noqa: E501
        if negotiated_duplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `negotiated_duplex_mode` ({0}), must be one of {1}"
                .format(negotiated_duplex_mode, allowed_values)
            )

        self._negotiated_duplex_mode = negotiated_duplex_mode
