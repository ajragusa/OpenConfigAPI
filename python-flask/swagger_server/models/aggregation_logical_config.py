# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AggregationLogicalConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, min_links: str=None, lag_type: str=None):  # noqa: E501
        """AggregationLogicalConfig - a model defined in Swagger

        :param min_links: The min_links of this AggregationLogicalConfig.  # noqa: E501
        :type min_links: str
        :param lag_type: The lag_type of this AggregationLogicalConfig.  # noqa: E501
        :type lag_type: str
        """
        self.swagger_types = {
            'min_links': str,
            'lag_type': str
        }

        self.attribute_map = {
            'min_links': 'minLinks',
            'lag_type': 'lagType'
        }

        self._min_links = min_links
        self._lag_type = lag_type

    @classmethod
    def from_dict(cls, dikt) -> 'AggregationLogicalConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AggregationLogicalConfig of this AggregationLogicalConfig.  # noqa: E501
        :rtype: AggregationLogicalConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_links(self) -> str:
        """Gets the min_links of this AggregationLogicalConfig.

        Specifies the mininum number of member interfaces that must be active for the aggregate interface to be available  # noqa: E501

        :return: The min_links of this AggregationLogicalConfig.
        :rtype: str
        """
        return self._min_links

    @min_links.setter
    def min_links(self, min_links: str):
        """Sets the min_links of this AggregationLogicalConfig.

        Specifies the mininum number of member interfaces that must be active for the aggregate interface to be available  # noqa: E501

        :param min_links: The min_links of this AggregationLogicalConfig.
        :type min_links: str
        """

        self._min_links = min_links

    @property
    def lag_type(self) -> str:
        """Gets the lag_type of this AggregationLogicalConfig.

        Sets the type of LAG, i.e., how it is configured / maintained  # noqa: E501

        :return: The lag_type of this AggregationLogicalConfig.
        :rtype: str
        """
        return self._lag_type

    @lag_type.setter
    def lag_type(self, lag_type: str):
        """Sets the lag_type of this AggregationLogicalConfig.

        Sets the type of LAG, i.e., how it is configured / maintained  # noqa: E501

        :param lag_type: The lag_type of this AggregationLogicalConfig.
        :type lag_type: str
        """

        self._lag_type = lag_type
