# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.sub_unnumbered_top import SubUnnumberedTop  # noqa: F401,E501
from swagger_server.models.subinterfaces_config import SubinterfacesConfig  # noqa: F401,E501
from swagger_server.models.subinterfaces_state import SubinterfacesState  # noqa: F401,E501
from swagger_server.models.vlan_logical_egress_mapping_top import VlanLogicalEgressMappingTop  # noqa: F401,E501
from swagger_server import util


class SubinterfaceSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, index: str=None, state: SubinterfacesState=None, ipv4: SubUnnumberedTop=None, ipv6: SubUnnumberedTop=None, vlan: VlanLogicalEgressMappingTop=None, config: SubinterfacesConfig=None):  # noqa: E501
        """SubinterfaceSchema - a model defined in Swagger

        :param index: The index of this SubinterfaceSchema.  # noqa: E501
        :type index: str
        :param state: The state of this SubinterfaceSchema.  # noqa: E501
        :type state: SubinterfacesState
        :param ipv4: The ipv4 of this SubinterfaceSchema.  # noqa: E501
        :type ipv4: SubUnnumberedTop
        :param ipv6: The ipv6 of this SubinterfaceSchema.  # noqa: E501
        :type ipv6: SubUnnumberedTop
        :param vlan: The vlan of this SubinterfaceSchema.  # noqa: E501
        :type vlan: VlanLogicalEgressMappingTop
        :param config: The config of this SubinterfaceSchema.  # noqa: E501
        :type config: SubinterfacesConfig
        """
        self.swagger_types = {
            'index': str,
            'state': SubinterfacesState,
            'ipv4': SubUnnumberedTop,
            'ipv6': SubUnnumberedTop,
            'vlan': VlanLogicalEgressMappingTop,
            'config': SubinterfacesConfig
        }

        self.attribute_map = {
            'index': 'index',
            'state': 'state',
            'ipv4': 'ipv4',
            'ipv6': 'ipv6',
            'vlan': 'vlan',
            'config': 'config'
        }

        self._index = index
        self._state = state
        self._ipv4 = ipv4
        self._ipv6 = ipv6
        self._vlan = vlan
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'SubinterfaceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubinterfaceSchema of this SubinterfaceSchema.  # noqa: E501
        :rtype: SubinterfaceSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self) -> str:
        """Gets the index of this SubinterfaceSchema.

        The index number of the subinterface -- used to address the logical interface  # noqa: E501

        :return: The index of this SubinterfaceSchema.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index: str):
        """Sets the index of this SubinterfaceSchema.

        The index number of the subinterface -- used to address the logical interface  # noqa: E501

        :param index: The index of this SubinterfaceSchema.
        :type index: str
        """

        self._index = index

    @property
    def state(self) -> SubinterfacesState:
        """Gets the state of this SubinterfaceSchema.

        Operational state data for logical interfaces  # noqa: E501

        :return: The state of this SubinterfaceSchema.
        :rtype: SubinterfacesState
        """
        return self._state

    @state.setter
    def state(self, state: SubinterfacesState):
        """Sets the state of this SubinterfaceSchema.

        Operational state data for logical interfaces  # noqa: E501

        :param state: The state of this SubinterfaceSchema.
        :type state: SubinterfacesState
        """

        self._state = state

    @property
    def ipv4(self) -> SubUnnumberedTop:
        """Gets the ipv4 of this SubinterfaceSchema.

        Parameters for the IPv4 address family.  # noqa: E501

        :return: The ipv4 of this SubinterfaceSchema.
        :rtype: SubUnnumberedTop
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4: SubUnnumberedTop):
        """Sets the ipv4 of this SubinterfaceSchema.

        Parameters for the IPv4 address family.  # noqa: E501

        :param ipv4: The ipv4 of this SubinterfaceSchema.
        :type ipv4: SubUnnumberedTop
        """

        self._ipv4 = ipv4

    @property
    def ipv6(self) -> SubUnnumberedTop:
        """Gets the ipv6 of this SubinterfaceSchema.

        Parameters for the IPv6 address family.  # noqa: E501

        :return: The ipv6 of this SubinterfaceSchema.
        :rtype: SubUnnumberedTop
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6: SubUnnumberedTop):
        """Sets the ipv6 of this SubinterfaceSchema.

        Parameters for the IPv6 address family.  # noqa: E501

        :param ipv6: The ipv6 of this SubinterfaceSchema.
        :type ipv6: SubUnnumberedTop
        """

        self._ipv6 = ipv6

    @property
    def vlan(self) -> VlanLogicalEgressMappingTop:
        """Gets the vlan of this SubinterfaceSchema.

        Enclosing container for VLAN interface-specific data on subinterfaces  # noqa: E501

        :return: The vlan of this SubinterfaceSchema.
        :rtype: VlanLogicalEgressMappingTop
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan: VlanLogicalEgressMappingTop):
        """Sets the vlan of this SubinterfaceSchema.

        Enclosing container for VLAN interface-specific data on subinterfaces  # noqa: E501

        :param vlan: The vlan of this SubinterfaceSchema.
        :type vlan: VlanLogicalEgressMappingTop
        """

        self._vlan = vlan

    @property
    def config(self) -> SubinterfacesConfig:
        """Gets the config of this SubinterfaceSchema.

        Configurable items at the subinterface level  # noqa: E501

        :return: The config of this SubinterfaceSchema.
        :rtype: SubinterfacesConfig
        """
        return self._config

    @config.setter
    def config(self, config: SubinterfacesConfig):
        """Sets the config of this SubinterfaceSchema.

        Configurable items at the subinterface level  # noqa: E501

        :param config: The config of this SubinterfaceSchema.
        :type config: SubinterfacesConfig
        """

        self._config = config
