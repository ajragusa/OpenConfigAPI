# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ipv6_neighbor_config import Ipv6NeighborConfig  # noqa: F401,E501
from swagger_server.models.ipv6_neighbor_state import Ipv6NeighborState  # noqa: F401,E501
from swagger_server import util


class NeighborSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, state: Ipv6NeighborState=None, config: Ipv6NeighborConfig=None):  # noqa: E501
        """NeighborSchema - a model defined in Swagger

        :param ip: The ip of this NeighborSchema.  # noqa: E501
        :type ip: str
        :param state: The state of this NeighborSchema.  # noqa: E501
        :type state: Ipv6NeighborState
        :param config: The config of this NeighborSchema.  # noqa: E501
        :type config: Ipv6NeighborConfig
        """
        self.swagger_types = {
            'ip': str,
            'state': Ipv6NeighborState,
            'config': Ipv6NeighborConfig
        }

        self.attribute_map = {
            'ip': 'ip',
            'state': 'state',
            'config': 'config'
        }

        self._ip = ip
        self._state = state
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'NeighborSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NeighborSchema of this NeighborSchema.  # noqa: E501
        :rtype: NeighborSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this NeighborSchema.

        References the configured IP neighbor address  # noqa: E501

        :return: The ip of this NeighborSchema.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this NeighborSchema.

        References the configured IP neighbor address  # noqa: E501

        :param ip: The ip of this NeighborSchema.
        :type ip: str
        """

        self._ip = ip

    @property
    def state(self) -> Ipv6NeighborState:
        """Gets the state of this NeighborSchema.

        State data for each IPv6 address on the interface  # noqa: E501

        :return: The state of this NeighborSchema.
        :rtype: Ipv6NeighborState
        """
        return self._state

    @state.setter
    def state(self, state: Ipv6NeighborState):
        """Sets the state of this NeighborSchema.

        State data for each IPv6 address on the interface  # noqa: E501

        :param state: The state of this NeighborSchema.
        :type state: Ipv6NeighborState
        """

        self._state = state

    @property
    def config(self) -> Ipv6NeighborConfig:
        """Gets the config of this NeighborSchema.

        Configuration data for each IPv6 address on the interface  # noqa: E501

        :return: The config of this NeighborSchema.
        :rtype: Ipv6NeighborConfig
        """
        return self._config

    @config.setter
    def config(self, config: Ipv6NeighborConfig):
        """Sets the config of this NeighborSchema.

        Configuration data for each IPv6 address on the interface  # noqa: E501

        :param config: The config of this NeighborSchema.
        :type config: Ipv6NeighborConfig
        """

        self._config = config
