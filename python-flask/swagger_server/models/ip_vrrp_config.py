# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IpVrrpConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, preempt_delay: str=None, virtual_router_id: str=None, priority: str=None, advertisement_interval: str=None, preempt: bool=None, accept_mode: bool=None, virtual_address: List[str]=None):  # noqa: E501
        """IpVrrpConfig - a model defined in Swagger

        :param preempt_delay: The preempt_delay of this IpVrrpConfig.  # noqa: E501
        :type preempt_delay: str
        :param virtual_router_id: The virtual_router_id of this IpVrrpConfig.  # noqa: E501
        :type virtual_router_id: str
        :param priority: The priority of this IpVrrpConfig.  # noqa: E501
        :type priority: str
        :param advertisement_interval: The advertisement_interval of this IpVrrpConfig.  # noqa: E501
        :type advertisement_interval: str
        :param preempt: The preempt of this IpVrrpConfig.  # noqa: E501
        :type preempt: bool
        :param accept_mode: The accept_mode of this IpVrrpConfig.  # noqa: E501
        :type accept_mode: bool
        :param virtual_address: The virtual_address of this IpVrrpConfig.  # noqa: E501
        :type virtual_address: List[str]
        """
        self.swagger_types = {
            'preempt_delay': str,
            'virtual_router_id': str,
            'priority': str,
            'advertisement_interval': str,
            'preempt': bool,
            'accept_mode': bool,
            'virtual_address': List[str]
        }

        self.attribute_map = {
            'preempt_delay': 'preemptDelay',
            'virtual_router_id': 'virtualRouterId',
            'priority': 'priority',
            'advertisement_interval': 'advertisementInterval',
            'preempt': 'preempt',
            'accept_mode': 'acceptMode',
            'virtual_address': 'virtualAddress'
        }

        self._preempt_delay = preempt_delay
        self._virtual_router_id = virtual_router_id
        self._priority = priority
        self._advertisement_interval = advertisement_interval
        self._preempt = preempt
        self._accept_mode = accept_mode
        self._virtual_address = virtual_address

    @classmethod
    def from_dict(cls, dikt) -> 'IpVrrpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IpVrrpConfig of this IpVrrpConfig.  # noqa: E501
        :rtype: IpVrrpConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preempt_delay(self) -> str:
        """Gets the preempt_delay of this IpVrrpConfig.

        Set the delay the higher priority router waits before preempting  # noqa: E501

        :return: The preempt_delay of this IpVrrpConfig.
        :rtype: str
        """
        return self._preempt_delay

    @preempt_delay.setter
    def preempt_delay(self, preempt_delay: str):
        """Sets the preempt_delay of this IpVrrpConfig.

        Set the delay the higher priority router waits before preempting  # noqa: E501

        :param preempt_delay: The preempt_delay of this IpVrrpConfig.
        :type preempt_delay: str
        """

        self._preempt_delay = preempt_delay

    @property
    def virtual_router_id(self) -> str:
        """Gets the virtual_router_id of this IpVrrpConfig.

        Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group  # noqa: E501

        :return: The virtual_router_id of this IpVrrpConfig.
        :rtype: str
        """
        return self._virtual_router_id

    @virtual_router_id.setter
    def virtual_router_id(self, virtual_router_id: str):
        """Sets the virtual_router_id of this IpVrrpConfig.

        Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group  # noqa: E501

        :param virtual_router_id: The virtual_router_id of this IpVrrpConfig.
        :type virtual_router_id: str
        """

        self._virtual_router_id = virtual_router_id

    @property
    def priority(self) -> str:
        """Gets the priority of this IpVrrpConfig.

        Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority  # noqa: E501

        :return: The priority of this IpVrrpConfig.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority: str):
        """Sets the priority of this IpVrrpConfig.

        Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority  # noqa: E501

        :param priority: The priority of this IpVrrpConfig.
        :type priority: str
        """

        self._priority = priority

    @property
    def advertisement_interval(self) -> str:
        """Gets the advertisement_interval of this IpVrrpConfig.

        Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds  # noqa: E501

        :return: The advertisement_interval of this IpVrrpConfig.
        :rtype: str
        """
        return self._advertisement_interval

    @advertisement_interval.setter
    def advertisement_interval(self, advertisement_interval: str):
        """Sets the advertisement_interval of this IpVrrpConfig.

        Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds  # noqa: E501

        :param advertisement_interval: The advertisement_interval of this IpVrrpConfig.
        :type advertisement_interval: str
        """

        self._advertisement_interval = advertisement_interval

    @property
    def preempt(self) -> bool:
        """Gets the preempt of this IpVrrpConfig.

        When set to true, enables preemption by a higher priority backup router of a lower priority master router  # noqa: E501

        :return: The preempt of this IpVrrpConfig.
        :rtype: bool
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt: bool):
        """Sets the preempt of this IpVrrpConfig.

        When set to true, enables preemption by a higher priority backup router of a lower priority master router  # noqa: E501

        :param preempt: The preempt of this IpVrrpConfig.
        :type preempt: bool
        """

        self._preempt = preempt

    @property
    def accept_mode(self) -> bool:
        """Gets the accept_mode of this IpVrrpConfig.

        Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface  # noqa: E501

        :return: The accept_mode of this IpVrrpConfig.
        :rtype: bool
        """
        return self._accept_mode

    @accept_mode.setter
    def accept_mode(self, accept_mode: bool):
        """Sets the accept_mode of this IpVrrpConfig.

        Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface  # noqa: E501

        :param accept_mode: The accept_mode of this IpVrrpConfig.
        :type accept_mode: bool
        """

        self._accept_mode = accept_mode

    @property
    def virtual_address(self) -> List[str]:
        """Gets the virtual_address of this IpVrrpConfig.


        :return: The virtual_address of this IpVrrpConfig.
        :rtype: List[str]
        """
        return self._virtual_address

    @virtual_address.setter
    def virtual_address(self, virtual_address: List[str]):
        """Sets the virtual_address of this IpVrrpConfig.


        :param virtual_address: The virtual_address of this IpVrrpConfig.
        :type virtual_address: List[str]
        """

        self._virtual_address = virtual_address
