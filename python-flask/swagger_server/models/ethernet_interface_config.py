# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EthernetInterfaceConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mac_address: str=None, auto_negotiate: bool=None, port_speed: str=None, enable_flow_control: bool=None, duplex_mode: str=None):  # noqa: E501
        """EthernetInterfaceConfig - a model defined in Swagger

        :param mac_address: The mac_address of this EthernetInterfaceConfig.  # noqa: E501
        :type mac_address: str
        :param auto_negotiate: The auto_negotiate of this EthernetInterfaceConfig.  # noqa: E501
        :type auto_negotiate: bool
        :param port_speed: The port_speed of this EthernetInterfaceConfig.  # noqa: E501
        :type port_speed: str
        :param enable_flow_control: The enable_flow_control of this EthernetInterfaceConfig.  # noqa: E501
        :type enable_flow_control: bool
        :param duplex_mode: The duplex_mode of this EthernetInterfaceConfig.  # noqa: E501
        :type duplex_mode: str
        """
        self.swagger_types = {
            'mac_address': str,
            'auto_negotiate': bool,
            'port_speed': str,
            'enable_flow_control': bool,
            'duplex_mode': str
        }

        self.attribute_map = {
            'mac_address': 'macAddress',
            'auto_negotiate': 'autoNegotiate',
            'port_speed': 'portSpeed',
            'enable_flow_control': 'enableFlowControl',
            'duplex_mode': 'duplexMode'
        }

        self._mac_address = mac_address
        self._auto_negotiate = auto_negotiate
        self._port_speed = port_speed
        self._enable_flow_control = enable_flow_control
        self._duplex_mode = duplex_mode

    @classmethod
    def from_dict(cls, dikt) -> 'EthernetInterfaceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EthernetInterfaceConfig of this EthernetInterfaceConfig.  # noqa: E501
        :rtype: EthernetInterfaceConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this EthernetInterfaceConfig.

        Assigns a MAC address to the Ethernet interface.  If not specified, the corresponding operational state leaf is expected to show the system-assigned MAC address.  # noqa: E501

        :return: The mac_address of this EthernetInterfaceConfig.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this EthernetInterfaceConfig.

        Assigns a MAC address to the Ethernet interface.  If not specified, the corresponding operational state leaf is expected to show the system-assigned MAC address.  # noqa: E501

        :param mac_address: The mac_address of this EthernetInterfaceConfig.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def auto_negotiate(self) -> bool:
        """Gets the auto_negotiate of this EthernetInterfaceConfig.

        Set to TRUE to request the interface to auto-negotiate transmission parameters with its peer interface.  When set to FALSE, the transmission parameters are specified manually.  # noqa: E501

        :return: The auto_negotiate of this EthernetInterfaceConfig.
        :rtype: bool
        """
        return self._auto_negotiate

    @auto_negotiate.setter
    def auto_negotiate(self, auto_negotiate: bool):
        """Sets the auto_negotiate of this EthernetInterfaceConfig.

        Set to TRUE to request the interface to auto-negotiate transmission parameters with its peer interface.  When set to FALSE, the transmission parameters are specified manually.  # noqa: E501

        :param auto_negotiate: The auto_negotiate of this EthernetInterfaceConfig.
        :type auto_negotiate: bool
        """

        self._auto_negotiate = auto_negotiate

    @property
    def port_speed(self) -> str:
        """Gets the port_speed of this EthernetInterfaceConfig.

        When auto-negotiate is TRUE, this optionally sets the port-speed mode that will be advertised to the peer for negotiation.  If unspecified, it is expected that the interface will select the highest speed available based on negotiation.  When auto-negotiate is set to FALSE, sets the link speed to a fixed value -- supported values are defined by ETHERNET_SPEED identities  # noqa: E501

        :return: The port_speed of this EthernetInterfaceConfig.
        :rtype: str
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed: str):
        """Sets the port_speed of this EthernetInterfaceConfig.

        When auto-negotiate is TRUE, this optionally sets the port-speed mode that will be advertised to the peer for negotiation.  If unspecified, it is expected that the interface will select the highest speed available based on negotiation.  When auto-negotiate is set to FALSE, sets the link speed to a fixed value -- supported values are defined by ETHERNET_SPEED identities  # noqa: E501

        :param port_speed: The port_speed of this EthernetInterfaceConfig.
        :type port_speed: str
        """

        self._port_speed = port_speed

    @property
    def enable_flow_control(self) -> bool:
        """Gets the enable_flow_control of this EthernetInterfaceConfig.

        Enable or disable flow control for this interface. Ethernet flow control is a mechanism by which a receiver may send PAUSE frames to a sender to stop transmission for a specified time.  This setting should override auto-negotiated flow control settings.  If left unspecified, and auto-negotiate is TRUE, flow control mode is negotiated with the peer interface.  # noqa: E501

        :return: The enable_flow_control of this EthernetInterfaceConfig.
        :rtype: bool
        """
        return self._enable_flow_control

    @enable_flow_control.setter
    def enable_flow_control(self, enable_flow_control: bool):
        """Sets the enable_flow_control of this EthernetInterfaceConfig.

        Enable or disable flow control for this interface. Ethernet flow control is a mechanism by which a receiver may send PAUSE frames to a sender to stop transmission for a specified time.  This setting should override auto-negotiated flow control settings.  If left unspecified, and auto-negotiate is TRUE, flow control mode is negotiated with the peer interface.  # noqa: E501

        :param enable_flow_control: The enable_flow_control of this EthernetInterfaceConfig.
        :type enable_flow_control: bool
        """

        self._enable_flow_control = enable_flow_control

    @property
    def duplex_mode(self) -> str:
        """Gets the duplex_mode of this EthernetInterfaceConfig.

        When auto-negotiate is TRUE, this optionally sets the duplex mode that will be advertised to the peer.  If unspecified, the interface should negotiate the duplex mode directly (typically full-duplex).  When auto-negotiate is FALSE, this sets the duplex mode on the interface directly.  # noqa: E501

        :return: The duplex_mode of this EthernetInterfaceConfig.
        :rtype: str
        """
        return self._duplex_mode

    @duplex_mode.setter
    def duplex_mode(self, duplex_mode: str):
        """Sets the duplex_mode of this EthernetInterfaceConfig.

        When auto-negotiate is TRUE, this optionally sets the duplex mode that will be advertised to the peer.  If unspecified, the interface should negotiate the duplex mode directly (typically full-duplex).  When auto-negotiate is FALSE, this sets the duplex mode on the interface directly.  # noqa: E501

        :param duplex_mode: The duplex_mode of this EthernetInterfaceConfig.
        :type duplex_mode: str
        """
        allowed_values = ["FULL", "HALF"]  # noqa: E501
        if duplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `duplex_mode` ({0}), must be one of {1}"
                .format(duplex_mode, allowed_values)
            )

        self._duplex_mode = duplex_mode
